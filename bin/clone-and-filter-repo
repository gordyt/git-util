#!/usr/bin/env python
import bisect
import contextlib
import logging
import os
import subprocess
import sys

VERSION = "0.1"
INCLUDE_PATHS = None
RM_PATHS = None
DEVNULL = open(os.devnull, 'w')


@contextlib.contextmanager
def in_directory(directory):
    save_dir = os.getcwd()
    os.chdir(directory)
    try:
        yield
    finally:
        os.chdir(save_dir)


def askYN(prompt):
    ans = ''
    question = "%s [y|n]: " % prompt
    while len(ans) == 0 or not ans in "nNyY":
        ans = raw_input(question)
    if ans in 'yY':
        return True
    return False


def get_cwd_size():
    return subprocess.check_output(['du', '-s', '-h', '.']).split('\n')[0].strip(" \t.")


def check_args(args):
    global INCLUDE_PATHS
    if not args.include_paths_file:
        logging.warn("No --include-paths-file so tree-filter will be applied")
    if not args.filter_dir:
        logging.warn("No --filter-dir so subdirectory-filter will not be applied")
    if args.include_paths_file and os.path.isfile(args.include_paths_file):
        INCLUDE_PATHS = filter(
            lambda p: p,
            map(
                lambda p: p.strip(),
                file(args.include_paths_file).read().split('\n')
            )
        )
    if args.include_paths_file and not INCLUDE_PATHS:
        logging.warn("Invalid or empty --include-paths-file")
        sys.exit(1)
    if args.reprocess and not os.path.isdir(args.dest_repo):
        logging.warn(
            "You asked to reprocess the output, but --dest-repo '%s' does not exist",
            args.dest_repo
        )
        sys.exit(1)
    if not args.reprocess and os.path.exists(args.dest_repo):
        logging.warn(
            "You did not ask to reprocess the output, but --dest-rep '%s' already exists",
            args.dest_repo
        )
        sys.exit(1)


def configure_logging(args):
    logging.basicConfig(
        format='[%(asctime)s][%(levelname)s] %(message)s',
        level=logging.INFO
    )


def prep_new_repo(args):
    logging.info(
        "cloning from '%s' to '%s'",
        args.source_repo,
        args.dest_repo
    )
    subprocess.call(
        ['git', 'clone', args.source_repo, args.dest_repo],
        stderr=DEVNULL
    )
    with in_directory(args.dest_repo):
        subprocess.call('git checkout --detach'.split(), stderr=DEVNULL)
        for b in subprocess.check_output("git branch".split()).split('\n'):
            bs = b.strip()
            if bs and not bs.startswith('*'):
                subprocess.call(
                    ['git', 'branch', '-D', bs],
                    stdout=DEVNULL
                )
        for rb in subprocess.check_output(
            'git branch --remotes --no-color'.split(),
            stderr=DEVNULL
        ).split('\n'):
            rb = rb.strip()
            if rb and not '->' in rb:
                logging.info("checking out branch '%s'", rb)
                subprocess.call(
                    ['git', 'checkout', '-f', '--track', rb],
                    stdout=DEVNULL,
                    stderr=DEVNULL
                )
        subprocess.call(['git', 'remote', 'remove', 'origin'])


def is_included_path(p):
    global INCLUDE_PATHS
    for ip in INCLUDE_PATHS:
        if p.startswith(ip) or ip.startswith(p):
            return True
    return False


def is_path_removed(p):
    global RM_PATHS
    rmlen = len(RM_PATHS)
    i1 = bisect.bisect_left(RM_PATHS, p)
    p1 = RM_PATHS[i1] if i1 < rmlen else None
    if p1 and p.startswith(p1):
        return True
    i2 = i1 - 1
    p2 = RM_PATHS[i2] if i2 >= 0 and i2 < rmlen else None
    if p2 and p.startswith(p2):
        return True
    return False


def apply_subdirectory_filter(args):
    logging.info("applying subdirectory filter for '%s' (CAN TAKE A LONG TIME!)", args.filter_dir)
    with in_directory(args.dest_repo):
        subprocess.call(
            [
                'git',
                'filter-branch',
                '--prune-empty',
                '--subdirectory-filter',
                args.filter_dir,
                '--',
                '--all'
            ],
            stderr=DEVNULL
        )
        orefs = '.git/refs/original'
        if os.path.isdir(orefs):
            logging.info("removing backup refs")
            subprocess.call(['rm', '-r', '-f', orefs])


def generate_tree_filter(args):
    global RM_PATHS
    RM_PATHS = []
    with in_directory(args.dest_repo):
        if args.base_branch:
            branches = [args.base_branch]
        else:
            branches = filter(
                lambda b: b,
                map(
                    lambda b: b.strip('* '),
                    subprocess.check_output(
                        ['git', 'branch'],
                        stderr=DEVNULL).split('\n')
                )
            )
        for b in branches:
            logging.info("computing deletes for branch '%s'", b)
            subprocess.call(
                ['git', 'checkout', '-q', '-f', b],
                stderr=DEVNULL
            )
            for p in filter(
                lambda p: p and p != '.',
                map(
                    lambda p: p.strip(),
                    subprocess.check_output(
                        ['find', '.', '-path', './.git', '-prune', '-o', '-print']
                    ).split('\n')
                )
            ):
                if (not is_included_path(p)) and (not is_path_removed(p)):
                    bisect.insort(RM_PATHS, p)


def apply_tree_filter(args):
    global RM_PATHS
    if not RM_PATHS:
        logging.info("No remove paths computed.  Skipping tree-filter")
        return
    logging.info("Removing the following paths from all branches:")
    for rp in RM_PATHS:
        logging.info("> %s", rp)
    rmp_quoted = " ".join(map(
        lambda p: '"%s"' % p,
        RM_PATHS
    ))
    if not args.answer_yes:
        yn = askYN("Continue?")
        if not yn:
            sys.exit(0)
    idx_filter = "'git rm -r -q --cached --ignore-unmatch %s'" % rmp_quoted
    with in_directory(args.dest_repo):
        os.system("git filter-branch --index-filter %s --prune-empty -- --all" % idx_filter)


def reclaim_repo_space(args):
    logging.info("reclaiming space in '%s'", args.dest_repo)
    with in_directory(args.dest_repo):
        s0 = get_cwd_size()
        logging.info("Size of repo before cleanup: %s", s0)
        orefs = '.git/refs/original'
        if os.path.isdir(orefs):
            logging.info("removing backup refs")
            subprocess.call(['rm', '-r', '-f', orefs])
        subprocess.call("git reflog expire --expire=now --all".split())
        subprocess.call("git gc --aggressive --prune=now".split())
        s1 = get_cwd_size()
        logging.info("Size of repo after cleanup: %s", s1)


def main():
    import argparse
    parser = argparse.ArgumentParser(
        description="clone and filter a git repo",
        version='%%(prog)s %s' % VERSION
    )
    parser.add_argument(
        '-s', '--source-repo',
        required=True,
        help='The source repo'
    )
    parser.add_argument(
        '-d', '--dest-repo',
        required=True,
        help='The (new) destination repo'
    )
    parser.add_argument(
        '-f', '--filter-dir',
        required=False,
        help=(
            'The top-level directory from the source repo to use. ' +
            'If not included then no subdirectory filter will be applied.'
        )
    )
    parser.add_argument(
        '-i', '--include-paths-file',
        help=(
            'The file that contains a list of paths to include. ' +
            'If not included then no tree filter will be applied.'
        )
    )
    parser.add_argument(
        '-b', '--base-branch',
        help='The base branch name to use for generating deletes'
    )
    parser.add_argument(
        '-r', '--reprocess',
        action='store_true',
        default=False,
        help='If specified, reprocess the DEST-REPO'
    )
    parser.add_argument(
        '--answer-yes',
        action='store_true',
        default=False,
        help='If included, automatically answer yes to all yes/no questions'
    )

    args = parser.parse_args()
    configure_logging(args)
    check_args(args)
    if not args.reprocess:
        prep_new_repo(args)
        if args.filter_dir:
            apply_subdirectory_filter(args)
    if INCLUDE_PATHS:
        generate_tree_filter(args)
        apply_tree_filter(args)
    reclaim_repo_space(args)


if __name__ == '__main__':
    main()
