#!/usr/bin/env python
import stashy
import json
import os
import subprocess

def list_open_pulls(args):
    print "Loading repo list from", args.repo_list_file
    json_file = open(args.repo_list_file)
    repo_list = json.load(json_file)
    stash_url = "https://{}:{}/".format(args.git_host,args.stash_port)
    print "Connecting to ", stash_url
    stash = stashy.connect(stash_url, args.git_user, args.git_password, verify=False)
    stash._client._session.timeout = 600000
    ref = "refs/heads/{}".format(args.target_branch)
    print "Checking repos for open pull requests to", args.target_branch
    dirty_repos = [];
    for repo_obj in repo_list:
        repo_name = repo_obj.name
        pulls = list(stash.projects[args.stash_project].repos[repo_name].pull_requests.all(at=ref, state='OPEN'))
        if len(pulls) == 0:
            print repo_name, "is clear"
        else:
            print repo_name, "has open pull requests to", args.target_branch
            for pr in pulls:
                dirty_repos.append({"name":repo_name, "author":pr['author']})

    if len(dirty_repos) > 0:
        print "Found repos with open pull requests"
        for dp in dirty_repos:
            print dp["name"], " has pull requests by", dp['author']['user']['displayName'], dp['author']['user']['emailAddress']
    else:
        print "All repos are clear. Did not find any open pull requests to", args.target_branch

def rename_remote_branch(args):
    json_file = open(args.repo_list_file)
    repo_list = json.load(json_file)
    cur_dir = os.getcwd()
    top_dir = os.path.dirname(cur_dir)
    for repo_obj in repo_list:
        os.chdir(top_dir)
        repo_name = repo_obj["name"]
        src_branch = repo_obj["branch"]
        print "Renaming {repo}/{srcbranch} to {repo}/{dstbranch}".format(repo=repo_name,srcbranch=src_branch,dstbranch=args.dest_branch_name)
        url = args.source_remote_url + repo_name + ".git"
        print "cloning ",url
        command = 'git clone {url}'.format(url=url)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)
        print "looking for existing branch with name ",args.dest_branch_name
        repo_dir = os.path.join(top_dir, repo_name)
        os.chdir(repo_dir)
        for line in subprocess.check_output(['git', 'branch']).split('\n'):
            print line
            b = line.replace("remotes/origin/","").replace("->","").replace("origin/","").strip("*").strip()
            print "found branch",b
            if b == args.dest_branch_name:
                newname = b+"-old"
                print "found branch wtih name",b,"will rename it to",newname
                command = 'git branch -m {oldb} {newb}'.format(oldb=b,newb=newname)
                subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)
                command = 'git push -f origin {newb}'.format(newb=newname)
                subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)
                break
            else:
                print "Did not find branch",args.dest_branch_name

        command = "git checkout {srcbranch}".format(srcbranch=src_branch)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)
        print "Pushing {repo}/{srcbranch} to {dstbranch}".format(repo=repo_name,srcbranch=src_branch,dstbranch=args.dest_branch_name)
        command = 'git branch -m {srcbranch} {dstbranch}'.format(srcbranch=src_branch,dstbranch=args.dest_branch_name)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)
        command = 'git push -f origin {dstbranch}'.format(dstbranch=args.dest_branch_name)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)

def do_move(args):
    print "Moving current branches from origin to", args.dest_remote_name, "/", args.dest_branch_name
    json_file = open(args.repo_list_file)
    repo_list = json.load(json_file)
    cur_dir = os.getcwd()
    top_dir = os.path.dirname(cur_dir)
    for repo_obj in repo_list:
        repo_name = repo_obj["name"]
        repo_dir = os.path.join(top_dir,repo_name)
        os.chdir(repo_dir)
        print "Working in ", repo_dir
        command = 'git branch -m {branch}'.format(branch=args.dest_branch_name)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)
        command = 'git push {remote} {branch}'.format(remote=args.dest_remote_name, branch=args.dest_branch_name)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)

def add_remote(args):
    print "Adding remote", args.dest_remote_url, "with name", args.dest_remote_name
    json_file = open(args.repo_list_file)
    repo_list = json.load(json_file)
    cur_dir = os.getcwd()
    top_dir = os.path.dirname(cur_dir)
    for repo_obj in repo_list:
        repo_name = repo_obj["name"]
        repo_dir = os.path.join(top_dir,repo_name)
        os.chdir(repo_dir)
        print "Working in ", repo_dir
        for remote in subprocess.check_output(['git','remote']).split('\n'):
            if remote == args.dest_remote_name:
                print "deleting remote", remote
                command = 'git remote remove {name}'.format(name=remote)
                subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)

        print "adding remote",args.dest_remote_name
        remote_url = args.dest_remote_url + repo_name + ".git"
        command = 'git remote add {name} {url}'.format(name=args.dest_remote_name, url=remote_url)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)

    os.chdir(cur_dir)

def move_branch(args):
    clone_repos(args)
    add_remote(args)
    do_move(args)

def clone_repos(args):
    print "Cloning repos from", args.source_remote_url
    json_file = open(args.repo_list_file)
    repo_list = json.load(json_file)
    cur_dir = os.getcwd()
    os.chdir(os.path.dirname(cur_dir))
    for repo_obj in repo_list:
        repo_name = repo_obj["name"]
        url = args.source_remote_url + repo_name + ".git"
        command = 'git clone -b {branch} {url}'.format(branch=repo_obj["branch"], url=url)
        subprocess.check_call(command, stderr=subprocess.STDOUT, shell=True)

    os.chdir(cur_dir)

def main():
    import argparse
    parser = argparse.ArgumentParser(
        description="Release management tools"
    )
    parser.add_argument(
        '-t', '--target-branch',
        help='Release integration branch',
        required=False,
    )
    parser.add_argument(
        '-u', '--git-user',
        help='Stash/git login',
        required=False,
    )
    parser.add_argument(
        '-w', '--git-password',
        help='Stash/git password',
        required=False,
    )
    parser.add_argument(
        '-g', '--git-host',
        default='stash.corp.synacor.com',
        help='Stash URL. Default: stash.corp.synacor.com'
    )
    parser.add_argument(
        '-p', '--stash-port',
        default=443,
        help='Stash REST API port. Default: 443. Note: this is not your git port'
    )
    parser.add_argument(
        '-r', '--stash-project',
        default='ZIMBRA',
        help='Stash project. Default: ZIMBRA'
    )
    parser.add_argument(
        '-f', '--repo-list-file',
        default='../zm-build/instructions/FOSS_repo_list.json',
        help='JSON file with list of repos to check'
    )
    parser.add_argument(
        '-a', '--action',
        default='list-pulls',
        help='Action. Default is list-pulls, which lists open pull requests'
    )
    parser.add_argument(
        '-sru', '--source-remote-url',
        help='Stash or Git base URL',
        required=False,
    )
    parser.add_argument(
        '-sbn', '--source-branch-name',
        help='Name of source git branch',
        required=False,
    )
    parser.add_argument(
        '-dru', '--dest-remote-url',
        help='URL of destination git remote',
        required=False,
    )
    parser.add_argument(
        '-drn', '--dest-remote-name',
        help='Name of destination git remote',
        required=False,
    )
    parser.add_argument(
        '-dbn', '--dest-branch-name',
        help='Name of destination git branch',
        required=False,
    )
    args = parser.parse_args()
    if args.action == 'list-pulls':
        list_open_pulls(args)
    elif args.action == 'add-remote':
        add_remote(args)
    elif args.action == 'clone-repos':
        clone_repos(args)
    elif args.action == 'move-branch':
        move_branch(args)
    elif args.action == 'rename-remote-branch':
        rename_remote_branch(args)
    else:
        print "unknown action"

if __name__ == '__main__':
    main()